{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { TYPES } from \"../contexts/web3Context/Types.js\";\nimport { Web3UserContext } from \"../contexts/web3Context/index.js\";\n/**\n * @note this hook should only be called inside the Web3Context. otherwise it will not work properly\n * @dev  this custom hook will run when the webpage loads. it will listen for changes in network (blockchain network) and account.\n */\n\nexport const useAddWeb3ProviderListners = () => {\n  _s();\n\n  const {\n    dispatch,\n    state: {\n      provider,\n      acceptedChainId\n    },\n    switchChain\n  } = Web3UserContext();\n  useEffect(() => {\n    provider && provider.on(\"accountsChanged\", async accounts => {\n      let payload = {\n        isWalletConnected: false,\n        account: null\n      };\n\n      if (accounts && accounts.length) {\n        payload = {\n          isWalletConnected: true,\n          account: accounts[0]\n        };\n      }\n\n      dispatch({\n        type: TYPES.UPDATE_CONNECTED_WALLET,\n        payload: payload\n      });\n    }); //  network event listeners\n\n    provider && provider.on(\"chainChanged\", async chainId => {\n      const isCorrectChain = parseInt(acceptedChainId) === parseInt(chainId);\n      dispatch({\n        type: TYPES.UDATE_CHAIN_DETAILS,\n        payload: {\n          isCorrectChain: isCorrectChain,\n          connectedChainId: chainId\n        }\n      });\n      if (!isCorrectChain) await switchChain();\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [provider]);\n};\n\n_s(useAddWeb3ProviderListners, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const useInitializeWeb3 = () => {\n  _s2();\n\n  const {\n    loadWeb3JS,\n    initializeWalletConnectProvider\n  } = Web3UserContext();\n  useEffect(() => {\n    initializeWalletConnectProvider();\n    loadWeb3JS(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\n_s2(useInitializeWeb3, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const useOnInitialWeb3Run = () => {\n  _s3();\n\n  const {\n    dispatch,\n    state: {\n      acceptedChainId,\n      web3Instance\n    },\n    switchChain,\n    getChainId\n  } = Web3UserContext();\n  useEffect(() => {\n    (async () => {\n      if (!web3Instance) return null; //  this method will fetch the current connected blockchain network\n\n      const chainId = await getChainId(); //  if the connected network is not as required it will ask to switch it\n\n      if (parseInt(acceptedChainId) !== parseInt(chainId)) await switchChain();else dispatch({\n        type: TYPES.UDATE_CHAIN_DETAILS,\n        payload: {\n          isCorrectChain: true,\n          connectedChainId: chainId\n        }\n      });\n    })(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [web3Instance]);\n};\n\n_s3(useOnInitialWeb3Run, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","TYPES","Web3UserContext","useAddWeb3ProviderListners","dispatch","state","provider","acceptedChainId","switchChain","on","accounts","payload","isWalletConnected","account","length","type","UPDATE_CONNECTED_WALLET","chainId","isCorrectChain","parseInt","UDATE_CHAIN_DETAILS","connectedChainId","useInitializeWeb3","loadWeb3JS","initializeWalletConnectProvider","useOnInitialWeb3Run","web3Instance","getChainId"],"sources":["E:/fiver-fix/enyoverse/src/hooks/web3Hooks.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { TYPES } from \"../contexts/web3Context/Types.js\";\nimport { Web3UserContext } from \"../contexts/web3Context/index.js\";\n\n/**\n * @note this hook should only be called inside the Web3Context. otherwise it will not work properly\n * @dev  this custom hook will run when the webpage loads. it will listen for changes in network (blockchain network) and account.\n */\nexport const useAddWeb3ProviderListners = () => {\n  const {\n    dispatch,\n    state: { provider, acceptedChainId },\n    switchChain,\n  } = Web3UserContext();\n  useEffect(() => {\n    provider &&\n      provider.on(\"accountsChanged\", async (accounts) => {\n        let payload = {\n          isWalletConnected: false,\n          account: null,\n        };\n        if (accounts && accounts.length) {\n          payload = { isWalletConnected: true, account: accounts[0] };\n        }\n        dispatch({\n          type: TYPES.UPDATE_CONNECTED_WALLET,\n          payload: payload,\n        });\n      });\n    //  network event listeners\n    provider &&\n      provider.on(\"chainChanged\", async (chainId) => {\n        const isCorrectChain = parseInt(acceptedChainId) === parseInt(chainId);\n        dispatch({\n          type: TYPES.UDATE_CHAIN_DETAILS,\n          payload: {\n            isCorrectChain: isCorrectChain,\n            connectedChainId: chainId,\n          },\n        });\n        if (!isCorrectChain) await switchChain();\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [provider]);\n};\n\nexport const useInitializeWeb3 = () => {\n  const { loadWeb3JS, initializeWalletConnectProvider } = Web3UserContext();\n\n  useEffect(() => {\n    initializeWalletConnectProvider();\n    loadWeb3JS();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nexport const useOnInitialWeb3Run = () => {\n  const {\n    dispatch,\n    state: { acceptedChainId, web3Instance },\n    switchChain,\n    getChainId,\n  } = Web3UserContext();\n  useEffect(() => {\n    (async () => {\n      if (!web3Instance) return null;\n      //  this method will fetch the current connected blockchain network\n      const chainId = await getChainId();\n\n      //  if the connected network is not as required it will ask to switch it\n      if (parseInt(acceptedChainId) !== parseInt(chainId)) await switchChain();\n      else\n        dispatch({\n          type: TYPES.UDATE_CHAIN_DETAILS,\n          payload: {\n            isCorrectChain: true,\n            connectedChainId: chainId,\n          },\n        });\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [web3Instance]);\n};\n"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;EAAA;;EAC9C,MAAM;IACJC,QADI;IAEJC,KAAK,EAAE;MAAEC,QAAF;MAAYC;IAAZ,CAFH;IAGJC;EAHI,IAIFN,eAAe,EAJnB;EAKAF,SAAS,CAAC,MAAM;IACdM,QAAQ,IACNA,QAAQ,CAACG,EAAT,CAAY,iBAAZ,EAA+B,MAAOC,QAAP,IAAoB;MACjD,IAAIC,OAAO,GAAG;QACZC,iBAAiB,EAAE,KADP;QAEZC,OAAO,EAAE;MAFG,CAAd;;MAIA,IAAIH,QAAQ,IAAIA,QAAQ,CAACI,MAAzB,EAAiC;QAC/BH,OAAO,GAAG;UAAEC,iBAAiB,EAAE,IAArB;UAA2BC,OAAO,EAAEH,QAAQ,CAAC,CAAD;QAA5C,CAAV;MACD;;MACDN,QAAQ,CAAC;QACPW,IAAI,EAAEd,KAAK,CAACe,uBADL;QAEPL,OAAO,EAAEA;MAFF,CAAD,CAAR;IAID,CAZD,CADF,CADc,CAed;;IACAL,QAAQ,IACNA,QAAQ,CAACG,EAAT,CAAY,cAAZ,EAA4B,MAAOQ,OAAP,IAAmB;MAC7C,MAAMC,cAAc,GAAGC,QAAQ,CAACZ,eAAD,CAAR,KAA8BY,QAAQ,CAACF,OAAD,CAA7D;MACAb,QAAQ,CAAC;QACPW,IAAI,EAAEd,KAAK,CAACmB,mBADL;QAEPT,OAAO,EAAE;UACPO,cAAc,EAAEA,cADT;UAEPG,gBAAgB,EAAEJ;QAFX;MAFF,CAAD,CAAR;MAOA,IAAI,CAACC,cAAL,EAAqB,MAAMV,WAAW,EAAjB;IACtB,CAVD,CADF,CAhBc,CA4Bd;EACD,CA7BQ,EA6BN,CAACF,QAAD,CA7BM,CAAT;AA8BD,CApCM;;GAAMH,0B;;AAsCb,OAAO,MAAMmB,iBAAiB,GAAG,MAAM;EAAA;;EACrC,MAAM;IAAEC,UAAF;IAAcC;EAAd,IAAkDtB,eAAe,EAAvE;EAEAF,SAAS,CAAC,MAAM;IACdwB,+BAA+B;IAC/BD,UAAU,GAFI,CAGd;EACD,CAJQ,EAIN,EAJM,CAAT;AAKD,CARM;;IAAMD,iB;;AAUb,OAAO,MAAMG,mBAAmB,GAAG,MAAM;EAAA;;EACvC,MAAM;IACJrB,QADI;IAEJC,KAAK,EAAE;MAAEE,eAAF;MAAmBmB;IAAnB,CAFH;IAGJlB,WAHI;IAIJmB;EAJI,IAKFzB,eAAe,EALnB;EAMAF,SAAS,CAAC,MAAM;IACd,CAAC,YAAY;MACX,IAAI,CAAC0B,YAAL,EAAmB,OAAO,IAAP,CADR,CAEX;;MACA,MAAMT,OAAO,GAAG,MAAMU,UAAU,EAAhC,CAHW,CAKX;;MACA,IAAIR,QAAQ,CAACZ,eAAD,CAAR,KAA8BY,QAAQ,CAACF,OAAD,CAA1C,EAAqD,MAAMT,WAAW,EAAjB,CAArD,KAEEJ,QAAQ,CAAC;QACPW,IAAI,EAAEd,KAAK,CAACmB,mBADL;QAEPT,OAAO,EAAE;UACPO,cAAc,EAAE,IADT;UAEPG,gBAAgB,EAAEJ;QAFX;MAFF,CAAD,CAAR;IAOH,CAfD,IADc,CAiBd;;EACD,CAlBQ,EAkBN,CAACS,YAAD,CAlBM,CAAT;AAmBD,CA1BM;;IAAMD,mB"},"metadata":{},"sourceType":"module"}