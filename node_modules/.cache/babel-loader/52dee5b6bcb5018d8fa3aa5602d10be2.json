{"ast":null,"code":"import { BScMainnet } from \"../../utils/chain.configs\";\nimport { TYPES } from \"./Types\"; // eslint-disable-next-line import/no-anonymous-default-export\n\nexport default (function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let dispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  let {\n    adminWallet,\n    account,\n    provider,\n    web3Instance,\n    WalletConnect,\n    Web3,\n    isWalletConnected,\n    isCorrectChain\n  } = state;\n  /**\n   * @info this will load web3 library using dynamic import. by importing dynamically we minimize the main bundle size\n   */\n\n  const loadWeb3JS = async () => {\n    const {\n      default: web3\n    } = await import(\"web3\"\n    /* webpackChunkName: \"web3-main\" */\n    );\n    dispatch({\n      type: TYPES.WEB3_JS_LOADED,\n      payload: web3\n    });\n  };\n  /**\n   * @info this will create an instance of web3Modal\n   */\n\n\n  const initializeWalletConnectProvider = async () => {\n    const {\n      default: WalletConnectProvider\n    } = await import(\"@walletconnect/web3-provider\"\n    /* webpackChunkName: \"walletconnect/web3-provider\" */\n    );\n    const WalletConnect = new WalletConnectProvider({\n      chainId: 56,\n      rpc: {\n        56: \"https://bsc-dataseed1.binance.org\"\n      }\n    });\n    dispatch({\n      type: TYPES.WALLET_CONNECT_INITIALIZED,\n      payload: WalletConnect\n    });\n  };\n\n  const connectMetamask = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) return window.open(\"https://metamask.io/download\", \"_blank\");\n    await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    handleProviderChange(ethereum);\n  };\n\n  const connectWalletWtihQR = async () => {\n    await WalletConnect.enable();\n    handleProviderChange(WalletConnect);\n  };\n  /**\n   * @dev this will display web3 modal with options. once user selects provider it will update the seleted provider and wallet address in application state.\n   */\n\n\n  const handleProviderChange = async provider => {\n    const web3Instance = new Web3(provider);\n    const account = await web3Instance.eth.getCoinbase();\n    dispatch({\n      type: TYPES.WALLET_CONNECTED,\n      payload: {\n        web3Instance,\n        account,\n        provider\n      }\n    });\n    return {\n      web3Instance,\n      account,\n      provider\n    };\n  };\n  /**\n   *\n   * @dev this function creates request for the network changes in metmaks. if the requested netwok is not available it will request to add it in metmask.\n   * @params chainId is the hex string of the chain Id. default is set to Binance mainnet\n   */\n\n\n  const switchChain = async function () {\n    let chainId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"0x38\";\n\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId\n        }]\n      });\n    } catch (err) {\n      // if no chain found request to add\n      if (err.code === 4902 || /Unrecognized chain ID/.test(err.message)) {\n        await provider.request({\n          method: \"wallet_addEthereumChain\",\n          params: BScMainnet\n        });\n      }\n    }\n  };\n  /**\n   * @info this function will checked the pre-conditions for the transaction to be sent\n      1) is wallet connected?\n      2) is seleted network correct?\n   * @dev this function will send transaction\n   */\n\n\n  const sendTransaction = async value => {\n    if (!isWalletConnected) return;\n    if (!isCorrectChain) await switchChain();\n    value = web3Instance.utils.toWei(value.toString(), \"ether\"); // amount should be in wei. this function converts BnB to wei which is equivalent 1e18 (1BNB = 1e18 wei)\n\n    const transactionParameters = {\n      to: adminWallet,\n      // Required except during contract publications.\n      from: account,\n      // Required must match user's active address.\n      value: web3Instance.utils.toHex(value) // the wei amount should be in hex. this function converts to hex. Only required to send ether to the recipient from the initiating external account.\n\n    }; // txHash is a hex string\n    // As with any RPC call, it may throw an error\n\n    return await provider.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n  };\n  /**\n   * @dev it returns current selected blockchain network in metamask\n   */\n\n\n  const getChainId = async () => {\n    if (!web3Instance) return null;\n    const chainId = await web3Instance.eth.getChainId();\n    return chainId;\n  };\n\n  return {\n    state,\n    dispatch,\n    sendTransaction,\n    switchChain,\n    getChainId,\n    initializeWalletConnectProvider,\n    loadWeb3JS,\n    connectMetamask,\n    connectWalletWtihQR\n  };\n});","map":{"version":3,"names":["BScMainnet","TYPES","state","dispatch","adminWallet","account","provider","web3Instance","WalletConnect","Web3","isWalletConnected","isCorrectChain","loadWeb3JS","default","web3","type","WEB3_JS_LOADED","payload","initializeWalletConnectProvider","WalletConnectProvider","chainId","rpc","WALLET_CONNECT_INITIALIZED","connectMetamask","ethereum","window","open","request","method","handleProviderChange","connectWalletWtihQR","enable","eth","getCoinbase","WALLET_CONNECTED","switchChain","params","err","code","test","message","sendTransaction","value","utils","toWei","toString","transactionParameters","to","from","toHex","getChainId"],"sources":["E:/fiver-fix/enyoverse/src/contexts/web3Context/actions.js"],"sourcesContent":["import { BScMainnet } from \"../../utils/chain.configs\";\nimport { TYPES } from \"./Types\";\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (state = {}, dispatch = () => {}) => {\n  let {\n    adminWallet,\n    account,\n    provider,\n    web3Instance,\n    WalletConnect,\n    Web3,\n    isWalletConnected,\n    isCorrectChain,\n  } = state;\n\n  /**\n   * @info this will load web3 library using dynamic import. by importing dynamically we minimize the main bundle size\n   */\n  const loadWeb3JS = async () => {\n    const { default: web3 } = await import(\n      \"web3\" /* webpackChunkName: \"web3-main\" */\n    );\n\n    dispatch({ type: TYPES.WEB3_JS_LOADED, payload: web3 });\n  };\n\n  /**\n   * @info this will create an instance of web3Modal\n   */\n  const initializeWalletConnectProvider = async () => {\n    const { default: WalletConnectProvider } = await import(\n      \"@walletconnect/web3-provider\" /* webpackChunkName: \"walletconnect/web3-provider\" */\n    );\n\n    const WalletConnect = new WalletConnectProvider({\n      chainId: 56,\n      rpc: {\n        56: \"https://bsc-dataseed1.binance.org\",\n      },\n    });\n\n    dispatch({\n      type: TYPES.WALLET_CONNECT_INITIALIZED,\n      payload: WalletConnect,\n    });\n  };\n  const connectMetamask = async () => {\n    const { ethereum } = window;\n    if (!ethereum) return window.open(\"https://metamask.io/download\", \"_blank\");\n    await ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    handleProviderChange(ethereum);\n  };\n\n  const connectWalletWtihQR = async () => {\n    await WalletConnect.enable();\n\n    handleProviderChange(WalletConnect);\n  };\n\n  /**\n   * @dev this will display web3 modal with options. once user selects provider it will update the seleted provider and wallet address in application state.\n   */\n  const handleProviderChange = async (provider) => {\n    const web3Instance = new Web3(provider);\n    const account = await web3Instance.eth.getCoinbase();\n\n    dispatch({\n      type: TYPES.WALLET_CONNECTED,\n      payload: {\n        web3Instance,\n        account,\n        provider,\n      },\n    });\n    return { web3Instance, account, provider };\n  };\n\n  /**\n   *\n   * @dev this function creates request for the network changes in metmaks. if the requested netwok is not available it will request to add it in metmask.\n   * @params chainId is the hex string of the chain Id. default is set to Binance mainnet\n   */\n  const switchChain = async (chainId = \"0x38\") => {\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (err) {\n      // if no chain found request to add\n      if (err.code === 4902 || /Unrecognized chain ID/.test(err.message)) {\n        await provider.request({\n          method: \"wallet_addEthereumChain\",\n          params: BScMainnet,\n        });\n      }\n    }\n  };\n\n  /**\n   * @info this function will checked the pre-conditions for the transaction to be sent\n      1) is wallet connected?\n      2) is seleted network correct?\n   * @dev this function will send transaction\n   */\n  const sendTransaction = async (value) => {\n    if (!isWalletConnected) return;\n    if (!isCorrectChain) await switchChain();\n\n    value = web3Instance.utils.toWei(value.toString(), \"ether\"); // amount should be in wei. this function converts BnB to wei which is equivalent 1e18 (1BNB = 1e18 wei)\n\n    const transactionParameters = {\n      to: adminWallet, // Required except during contract publications.\n      from: account, // Required must match user's active address.\n      value: web3Instance.utils.toHex(value), // the wei amount should be in hex. this function converts to hex. Only required to send ether to the recipient from the initiating external account.\n    };\n\n    // txHash is a hex string\n    // As with any RPC call, it may throw an error\n    return await provider.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n  };\n\n  /**\n   * @dev it returns current selected blockchain network in metamask\n   */\n  const getChainId = async () => {\n    if (!web3Instance) return null;\n    const chainId = await web3Instance.eth.getChainId();\n    return chainId;\n  };\n\n  return {\n    state,\n    dispatch,\n    sendTransaction,\n    switchChain,\n    getChainId,\n    initializeWalletConnectProvider,\n    loadWeb3JS,\n\n    connectMetamask,\n    connectWalletWtihQR,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}